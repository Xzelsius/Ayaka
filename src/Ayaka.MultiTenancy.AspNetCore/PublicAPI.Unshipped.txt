#nullable enable
Ayaka.MultiTenancy.AspNetCore.Detection.FromRequestHeaderStrategy
Ayaka.MultiTenancy.AspNetCore.Detection.FromRequestHeaderStrategy.FromRequestHeaderStrategy(string! headerName) -> void
Ayaka.MultiTenancy.AspNetCore.Detection.FromRequestHeaderStrategy.HeaderName.get -> string!
Ayaka.MultiTenancy.AspNetCore.Detection.FromRequestHeaderStrategy.TryDetectAsync(Microsoft.AspNetCore.Http.HttpContext! context) -> System.Threading.Tasks.Task<string?>!
Ayaka.MultiTenancy.AspNetCore.Detection.FromRequestHostStrategy
Ayaka.MultiTenancy.AspNetCore.Detection.FromRequestHostStrategy.FromRequestHostStrategy() -> void
Ayaka.MultiTenancy.AspNetCore.Detection.FromRequestHostStrategy.TryDetectAsync(Microsoft.AspNetCore.Http.HttpContext! context) -> System.Threading.Tasks.Task<string?>!
Ayaka.MultiTenancy.AspNetCore.Detection.ITenantDetectionStrategy
Ayaka.MultiTenancy.AspNetCore.Detection.ITenantDetectionStrategy.TryDetectAsync(Microsoft.AspNetCore.Http.HttpContext! context) -> System.Threading.Tasks.Task<string?>!
Ayaka.MultiTenancy.AspNetCore.RequestTenancyOptions
Ayaka.MultiTenancy.AspNetCore.RequestTenancyOptions.DetectionStrategies.get -> System.Collections.Generic.IList<Ayaka.MultiTenancy.AspNetCore.Detection.ITenantDetectionStrategy!>!
Ayaka.MultiTenancy.AspNetCore.RequestTenancyOptions.DetectionStrategies.init -> void
Ayaka.MultiTenancy.AspNetCore.RequestTenancyOptions.RequestTenancyOptions() -> void
Ayaka.MultiTenancy.DependencyInjection.MultiTenancyBuilderExtensions
Ayaka.MultiTenancy.DependencyInjection.RequestTenancyBuilder
Ayaka.MultiTenancy.DependencyInjection.RequestTenancyBuilder.DetectFromRequestHeader(string! headerName) -> Ayaka.MultiTenancy.DependencyInjection.RequestTenancyBuilder!
Ayaka.MultiTenancy.DependencyInjection.RequestTenancyBuilder.DetectFromRequestHost() -> Ayaka.MultiTenancy.DependencyInjection.RequestTenancyBuilder!
Ayaka.MultiTenancy.DependencyInjection.RequestTenancyBuilder.DetectUsing(Ayaka.MultiTenancy.AspNetCore.Detection.ITenantDetectionStrategy! strategy) -> Ayaka.MultiTenancy.DependencyInjection.RequestTenancyBuilder!
Ayaka.MultiTenancy.DependencyInjection.RequestTenancyBuilder.DetectUsing<TDetectionStrategy>() -> Ayaka.MultiTenancy.DependencyInjection.RequestTenancyBuilder!
Ayaka.MultiTenancy.DependencyInjection.RequestTenancyBuilder.MultiTenancy.get -> Ayaka.MultiTenancy.DependencyInjection.IMultiTenancyBuilder!
static Ayaka.MultiTenancy.DependencyInjection.MultiTenancyBuilderExtensions.ConfigureRequestTenancy(this Ayaka.MultiTenancy.DependencyInjection.IMultiTenancyBuilder! builder, System.Action<Ayaka.MultiTenancy.DependencyInjection.RequestTenancyBuilder!>! configure) -> Ayaka.MultiTenancy.DependencyInjection.IMultiTenancyBuilder!
