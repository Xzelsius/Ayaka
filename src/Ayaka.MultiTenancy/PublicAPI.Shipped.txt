#nullable enable
Ayaka.MultiTenancy.AsyncLocalTenantContextAccessor
Ayaka.MultiTenancy.AsyncLocalTenantContextAccessor.AsyncLocalTenantContextAccessor() -> void
Ayaka.MultiTenancy.AsyncLocalTenantContextAccessor.TenantContext.get -> Ayaka.MultiTenancy.TenantContext?
Ayaka.MultiTenancy.AsyncLocalTenantContextAccessor.TenantContext.set -> void
Ayaka.MultiTenancy.DependencyInjection.MultiTenancyBuilderExtensions
Ayaka.MultiTenancy.DependencyInjection.TenantManagementBuilderExtensions
Ayaka.MultiTenancy.Management.InMemoryTenantStore
Ayaka.MultiTenancy.Management.InMemoryTenantStore.AddAsync(Ayaka.MultiTenancy.Management.Tenant! tenant, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Ayaka.MultiTenancy.Management.InMemoryTenantStore.GetAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Ayaka.MultiTenancy.Management.Tenant!>!>!
Ayaka.MultiTenancy.Management.InMemoryTenantStore.InMemoryTenantStore() -> void
Ayaka.MultiTenancy.Management.InMemoryTenantStore.RemoveAsync(string! id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Ayaka.MultiTenancy.Management.InMemoryTenantStore.UpdateAsync(Ayaka.MultiTenancy.Management.Tenant! tenant, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Ayaka.MultiTenancy.ServiceCollectionExtensions
static Ayaka.MultiTenancy.DependencyInjection.MultiTenancyBuilderExtensions.AddTenantManagement(this Ayaka.MultiTenancy.DependencyInjection.IMultiTenancyBuilder! builder) -> Ayaka.MultiTenancy.DependencyInjection.ITenantManagementBuilder!
static Ayaka.MultiTenancy.DependencyInjection.TenantManagementBuilderExtensions.UseInMemoryStore(this Ayaka.MultiTenancy.DependencyInjection.ITenantManagementBuilder! builder) -> Ayaka.MultiTenancy.DependencyInjection.ITenantManagementBuilder!
static Ayaka.MultiTenancy.ServiceCollectionExtensions.AddMultiTenancy(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Ayaka.MultiTenancy.DependencyInjection.IMultiTenancyBuilder!
static Ayaka.MultiTenancy.ServiceCollectionExtensions.AddTenantContextAccessor(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
