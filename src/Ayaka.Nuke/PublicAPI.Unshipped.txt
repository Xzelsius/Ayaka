#nullable enable
Ayaka.Nuke.DotNetValidate.DotNetValidateLocalPackageSettings.PackagePath.get -> string!
Ayaka.Nuke.DotNetValidate.DotNetValidateRemotePackageSettings.ConfigDirectory.get -> string?
Ayaka.Nuke.DotNetValidate.DotNetValidateRemotePackageSettings.PackageId.get -> string!
Ayaka.Nuke.DotNetValidate.DotNetValidateRemotePackageSettings.PackageVersion.get -> string?
Ayaka.Nuke.GitHub.GitHubPullRequestSettings.Base.get -> string!
Ayaka.Nuke.GitHub.GitHubPullRequestSettings.Body.get -> string?
Ayaka.Nuke.GitHub.GitHubPullRequestSettings.Draft.get -> bool?
Ayaka.Nuke.GitHub.GitHubPullRequestSettings.Head.get -> string!
Ayaka.Nuke.GitHub.GitHubPullRequestSettings.Title.get -> string!
Ayaka.Nuke.GitHub.GitHubReleaseNotesSettings.ConfigFile.get -> string?
Ayaka.Nuke.GitHub.GitHubReleaseNotesSettings.PreviousTag.get -> string?
Ayaka.Nuke.GitHub.GitHubReleaseNotesSettings.Tag.get -> string!
Ayaka.Nuke.GitHub.GitHubReleaseNotesSettings.TargetCommitish.get -> string?
Ayaka.Nuke.GitHub.GitHubReleaseSettings.ArtifactPaths.get -> System.Collections.Generic.IReadOnlyList<string!>!
Ayaka.Nuke.GitHub.GitHubReleaseSettings.Body.get -> string?
Ayaka.Nuke.GitHub.GitHubReleaseSettings.Draft.get -> bool?
Ayaka.Nuke.GitHub.GitHubReleaseSettings.GenerateReleaseNotes.get -> bool?
Ayaka.Nuke.GitHub.GitHubReleaseSettings.Name.get -> string?
Ayaka.Nuke.GitHub.GitHubReleaseSettings.PreRelease.get -> bool?
Ayaka.Nuke.GitHub.GitHubReleaseSettings.Tag.get -> string!
Ayaka.Nuke.GitHub.GitHubReleaseSettings.TargetCommitish.get -> string?
Ayaka.Nuke.GitHub.GitHubSettings.BaseUrl.get -> string?
Ayaka.Nuke.GitHub.GitHubSettings.RepositoryName.get -> string!
Ayaka.Nuke.GitHub.GitHubSettings.RepositoryOwner.get -> string!
Ayaka.Nuke.GitHub.GitHubSettings.Token.get -> string!
const Ayaka.Nuke.DotNetValidate.DotNetValidateTasks.DotNetValidateExecutablePath = "dotnet-validate.dll" -> string!
static Ayaka.Nuke.DotNetValidate.DotNetValidateTasks.DotNetValidate(Nuke.Common.Tooling.ArgumentStringHandler arguments, string? workingDirectory = null, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? environmentVariables = null, int? timeout = null, bool? logOutput = null, bool? logInvocation = null, System.Action<Nuke.Common.Tooling.OutputType, string!>? logger = null, System.Func<Nuke.Common.Tooling.IProcess!, object!>? exitHandler = null) -> System.Collections.Generic.IReadOnlyCollection<Nuke.Common.Tooling.Output>!
static Ayaka.Nuke.Extensions.When<T>(this T settings, bool condition, System.Func<T, T>! configurator) -> T
